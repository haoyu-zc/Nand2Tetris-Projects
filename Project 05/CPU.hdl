// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decoder of "CPU Input part"
    // Create a variable pin for instruction control bit, op-code bit
    Not(in=instruction[15], out=isAinst);
    
    // "cb" stands for control bit
    // Control bit of A/M Mux, true if (A-instruction)
    Mux(a=instruction[12], b=true, sel=isAinst, out=cba);

    // Decoder of "ALU part"
    // c-bits
    Mux(a=instruction[11], b=true, sel=isAinst, out=cbc1);
    Mux(a=instruction[10], b=false, sel=isAinst, out=cbc2);
    Mux(a=instruction[9], b=true, sel=isAinst, out=cbc3);
    Mux(a=instruction[8], b=false, sel=isAinst, out=cbc4);
    Mux(a=instruction[7], b=true, sel=isAinst, out=cbc5);
    Mux(a=instruction[6], b=false, sel=isAinst, out=cbc6);

    // Destination bits
    // Control bit of A register
    Mux(a=instruction[5], b=true, sel=isAinst, out=cbd1);
    // Control bit of D register
    Mux(a=instruction[4], b=false, sel=isAinst, out=cbd2);
    // Control bit of M register
    Mux(a=instruction[3], b=false, sel=isAinst, out=cbd3);

    // Jump bits
    Mux(a=instruction[2], b=false, sel=isAinst, out=cbj1);
    Mux(a=instruction[1], b=false, sel=isAinst, out=cbj2);
    Mux(a=instruction[0], b=false, sel=isAinst, out=cbj3);


    // CPU Input part
    // If (A-insturction), then load it to A register, otherwise load 
    // from aluout2a
    Mux16(a=aluout2a, b=instruction, sel=isAinst, out=aregmux);
    ARegister(in=aregmux, load=cbd1, out=aregout2mux, out=aregout2pc,
    out[0..14]=addressM);
    Mux16(a=inM, b=aregout2mux, sel=cba, out=ammuxout);
    
    // ALU part
    ALU(x=dregout, y=ammuxout, zx=cbc1, nx=cbc2, zy=cbc3,
    ny=cbc4, f=cbc5, no=cbc6,
    out=aluout2a, out=aluout2d, out=aluout2m, zr=zr, ng=ng);

    // ALU outputs
    Mux16(a=false, b=aluout2m, sel=cbd3, out=outM);
    Or(a=cbd3, b=false, out=writeM);

    // D register
    DRegister(in=aluout2d, load=cbd2, out=dregout);

    // PC part
    // Compute load and inc
    And(a=ng, b=cbj1, out=isLess);
    Mux(a=false, b=true, sel=isLess, out=o1);
    And(a=zr, b=cbj2, out=isEqual);
    Mux(a=o1, b=true, sel=isEqual, out=o2);
    Not(in=ng, out=ps);
    And(a=ps, b=cbj3, out=isGreater);
    Mux(a=o2, b=true, sel=isGreater, out=load);

    PC(in=aregout2pc, load=load, inc=true, reset=reset, out[0..14]=pc);
}