// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Create a variable pin for instruction control bit
    Or(a=instruction[0], b=false, out=isAinst);
    Mux16(a=instruction, b=aluout2a, sel=isAinst, out=aregmux);
    ARegister(in=aregmux, load=instruction[10], out=aregout2mux, out=aregout2pc,
    out[0..14]=addressM);
    Mux16(a=aregout2mux, b=inM, sel=instruction[3], out=ammuxout);
    
    // ALU part
    ALU(x=dregout, y=ammuxout, zx=instruction[4], nx=instruction[5], zy=instruction[6],
    ny=instruction[7], f=instruction[8], no=instruction[9],
    out=aluout2a, out=aluout2d, out=aluout2m, zr=zr, ng=ng);

    // ALU outputs
    Mux16(a=false, b=aluout2m, sel=instruction[12], out=outM);
    Or(a=instruction[12], b=false, out=writeM);

    // D register
    DRegister(in=aluout2d, load=instruction[11], out=dregout);

    // PC part
    // Compute load and inc
    And(a=ng, b=instruction[13], out=isLess);
    Mux(a=false, b=true, sel=isLess, out=o1);
    And(a=zr, b=instruction[14], out=isEqual);
    Mux(a=o1, b=true, sel=isEqual, out=o2);
    And(a=o2, b=false, out=o3);
    Mux(a=o3, b=true, sel=instruction[15], out=load);

    PC(in=aregout2pc, load=load, inc=true, reset=reset, out=PC);
}